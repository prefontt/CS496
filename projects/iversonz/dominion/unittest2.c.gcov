        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:
        -:    6:// gcc -o unittest1 unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    7:// gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c unittest2.c rngs.c -o unittest2 -lm -g
        -:    8:int zdi_assert(int a, char * string)
        -:    9:{
        3:   10:  if(a == 1)
        -:   11:  {
        3:   12:    printf("Test Passed: \t %s \n\n\n", string);
        3:   13:    return 0;
        -:   14:  }
    #####:   15:  else if( a == 2)
        -:   16:  {
    #####:   17:    printf("Test Failed: \t %s\n\n\n", string);
    #####:   18:  }
    #####:   19:  return 0;
        -:   20:
        3:   21:}
        -:   22:
        -:   23:
        -:   24:int main()
        -:   25:{
        -:   26:  int a, b, number_of_cards;
        3:   27:  int randomSeed = 10;
        -:   28:  struct gameState game;
        3:   29:  int cards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   30:
        -:   31:// Initialize the game
        3:   32:  a = initializeGame(2,cards, randomSeed, &game);
        -:   33:
        -:   34:// Count the number of cards of player one
        3:   35:  number_of_cards = numHandCards(&game);
        -:   36:
        3:   37:  printf("Unit Test 2\n\n");
        -:   38:
        3:   39:  if(number_of_cards == 5)
        -:   40:  {
        3:   41:    b = zdi_assert(1, "Player 1 had 5 cards check");
        3:   42:  }
        -:   43:  else
        -:   44:  {
    #####:   45:    b = zdi_assert(2, "Player 1 had 5 cards check");
        -:   46:  }
        -:   47:
        3:   48:  return 0;
        -:   49:}
