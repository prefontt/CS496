Function isGameOver() - TEST 1 SUCCESFULLY COMPLETED
Function isGameOver() - TEST 2 SUCCESFULLY COMPLETED
Function isGameOver() - TEST 3 SUCCESFULLY COMPLETED
Function isGameOver() - TEST 4 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:17.37% of 570
Branches executed:17.75% of 417
Taken at least once:14.63% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 30 returned 100% blocks executed 83%
       30:    9:int compare(const void* a, const void* b) {
       30:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   11:		return 1;
       30:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   13:		return -1;
       22:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        1:   42:	SelectStream(1);
call    0 returned 1
        1:   43:	PutSeed((long)randomSeed);
call    0 returned 1
        -:   44:  
        -:   45:	// Check number of players.
        1:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        1:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       11:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 10
branch  1 taken 1 (fallthrough)
      110:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        1:   65:	if (numPlayers == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        1:   76:	if (numPlayers == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   77:		state->supplyCount[estate] = 8;
        1:   78:		state->supplyCount[duchy] = 8;
        1:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        1:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:   89:	state->supplyCount[silver] = 40;
        1:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
       21:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 20
branch  1 taken 1 (fallthrough)
      165:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 155
branch  1 taken 10 (fallthrough)
      155:   95:			if (kingdomCards[j] == i) {
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       10:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 9
        2:   98:					if (numPlayers == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
        9:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       10:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
      145:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
        3:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  119:		state->deckCount[i] = 0;
        8:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  121:			state->deck[i][j] = estate;
        6:  122:			state->deckCount[i]++;
        -:  123:		}
       16:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 14
branch  1 taken 2 (fallthrough)
       14:  125:			state->deck[i][j] = copper;
       14:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
        3:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
        3:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:		// Initialize hand size to zero.
        2:  140:		state->handCount[i] = 0;
        2:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
       28:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 27
branch  1 taken 1 (fallthrough)
       27:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        1:  154:	state->outpostPlayed = 0;
        1:  155:	state->phase = 0;
        1:  156:	state->numActions = 1;
        1:  157:	state->numBuys = 1;
        1:  158:	state->playedCardCount = 0;
        1:  159:	state->whoseTurn = 0;
        1:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
        6:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  164:		drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  165:	}
        -:  166:
        1:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  168:
        1:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 2 returned 100% blocks executed 94%
        2:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
        2:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
        2:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  179:		return -1;
        -:  180:
        2:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
       24:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  186:		newDeck[newDeckPos] = state->deck[player][card];
       20:  187:		newDeckPos++;
       56:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 36
branch  1 taken 20 (fallthrough)
       36:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
       20:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
       22:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  195:		state->deck[player][i] = newDeck[i];
       20:  196:		state->deckCount[player]++;
        -:  197:	}
        2:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  285:int supplyCount(int card, struct gameState *state) {
    #####:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  309:int whoseTurn(struct gameState *state) {
    #####:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
    #####:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
    #####:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
    #####:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
    #####:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
    #####:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
    #####:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  420:		// Set unused player scores to -9999
    #####:  421:		if (i >= state->numPlayers) {
branch  0 never executed
branch  1 never executed
    #####:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
    #####:  425:			players[i] = scoreFor(i, state);
call    0 never executed
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
    #####:  430:	j = 0;
    #####:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  432:		if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
    #####:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
    #####:  439:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
    #####:  447:	j = 0;
    #####:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  449:		if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
    #####:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
    #####:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  457:		if ( players[i] == highScore ) {
branch  0 never executed
branch  1 never executed
    #####:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
    #####:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
    #####:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 5 returned 100% blocks executed 38%
        5:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
        5:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
        5:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
        5:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  516:	state->deckCount[player]--;
        5:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
        5:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 0 returned 0% blocks executed 0%
    #####:  522:int getCost(int cardNumber) {
    #####:  523:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
    #####:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
    #####:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
    #####:  557:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
    #####:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
    #####:  569:	switch( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
    #####:  576:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  577:				drawCard(currentPlayer, state);
call    0 never executed
        -:  578:			}
        -:  579:			// +1 Buy.
    #####:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
    #####:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  583:				if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####:  584:					drawCard(i, state);
call    0 never executed
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
    #####:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
    #####:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  641:				return -1;
        -:  642:			}
    #####:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:				return -1;
        -:  645:			}
    #####:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  647:				return -1;
        -:  648:			}
    #####:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  650:
        -:  651:			// Discard card from hand.
    #####:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  653:			// Discard trashed card.
    #####:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  656:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  657:					break;
        -:  658:				}
        -:  659:			}
    #####:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 0 returned 0% blocks executed 0%
    #####:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
    #####:  909:	int drawntreasure = 0;
    #####:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
    #####:  913:	while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 never executed
branch  1 never executed
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
    #####:  917:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
    #####:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  920:			drawntreasure++;
        -:  921:		else {
    #####:  922:			temphand[z] = cardDrawn;
    #####:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
    #####:  924:			z++;
        -:  925:		}
        -:  926:	}
    #####:  927:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
    #####:  929:		z = z - 1;
        -:  930:	}
    #####:  931:}
        -:  932:
        -:  933:
function runSmithy called 0 returned 0% blocks executed 0%
    #####:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
    #####:  937:	for (i = 3; i > 0; i--) {
branch  0 never executed
branch  1 never executed
    #####:  938:		drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	}
        -:  940:	// Discard card from hand.
    #####:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 never executed
    #####:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
    #####: 1058:	if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1059:		// Add card to played pile.
    #####: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
    #####: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
    #####: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 never executed
branch  1 never executed
        -: 1067:		// Reduce number of cards in hand.
    #####: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
    #####: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 never executed
branch  1 never executed
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
    #####: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
    #####: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
    #####: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
    #####: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
    #####: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
    #####: 1098:	if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1100:		state->deckCount[player]++;
        -: 1101:	}
    #####: 1102:	else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
    #####: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
    #####: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
    #####: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        1: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
        6: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        3: 1124:			state->coins += 1;
        -: 1125:		}
        2: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1127:			state->coins += 2;
        -: 1128:		}
        2: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        1: 1134:	state->coins += bonus;
        -: 1135:
        1: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
Function getWinners() - TEST 1 SUCCESFULLY COMPLETED
Function getWinners() - TEST 2 SUCCESFULLY COMPLETED
Function getWinners() - TEST 3 SUCCESFULLY COMPLETED
Function getWinners() - TEST 4 FAILED - Potential bug!
File 'dominion.c'
Lines executed:23.51% of 570
Branches executed:27.34% of 417
Taken at least once:21.82% of 417
Calls executed:9.47% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 60 returned 100% blocks executed 83%
       60:    9:int compare(const void* a, const void* b) {
       60:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 60
    #####:   11:		return 1;
       60:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 16 (fallthrough)
branch  1 taken 44
       16:   13:		return -1;
       44:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 2 returned 100% blocks executed 88%
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        2:   42:	SelectStream(1);
call    0 returned 2
        2:   43:	PutSeed((long)randomSeed);
call    0 returned 2
        -:   44:  
        -:   45:	// Check number of players.
        2:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        2:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       22:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
      220:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 200
branch  1 taken 20 (fallthrough)
      200:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 180 (fallthrough)
branch  1 taken 20
branch  2 taken 0 (fallthrough)
branch  3 taken 180
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        2:   65:	if (numPlayers == 2) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        2:   76:	if (numPlayers == 2) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   77:		state->supplyCount[estate] = 8;
        2:   78:		state->supplyCount[duchy] = 8;
        2:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        2:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:   89:	state->supplyCount[silver] = 40;
        2:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
       42:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 40
branch  1 taken 2 (fallthrough)
      330:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 310
branch  1 taken 20 (fallthrough)
      310:   95:			if (kingdomCards[j] == i) {
branch  0 taken 20 (fallthrough)
branch  1 taken 290
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       20:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 20 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 18
        4:   98:					if (numPlayers == 2) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
       18:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       20:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
      290:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
        6:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:  119:		state->deckCount[i] = 0;
       16:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:  121:			state->deck[i][j] = estate;
       12:  122:			state->deckCount[i]++;
        -:  123:		}
       32:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 28
branch  1 taken 4 (fallthrough)
       28:  125:			state->deck[i][j] = copper;
       28:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
        6:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
        6:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  139:		// Initialize hand size to zero.
        4:  140:		state->handCount[i] = 0;
        4:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
       56:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 54
branch  1 taken 2 (fallthrough)
       54:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        2:  154:	state->outpostPlayed = 0;
        2:  155:	state->phase = 0;
        2:  156:	state->numActions = 1;
        2:  157:	state->numBuys = 1;
        2:  158:	state->playedCardCount = 0;
        2:  159:	state->whoseTurn = 0;
        2:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
       12:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  164:		drawCard(state->whoseTurn, state);
call    0 returned 10
        -:  165:	}
        -:  166:
        2:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 2
        -:  168:
        2:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 4 returned 100% blocks executed 94%
        4:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
        4:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
        4:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  179:		return -1;
        -:  180:
        4:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 4
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
       48:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 40
branch  1 taken 4 (fallthrough)
       40:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 40
       40:  186:		newDeck[newDeckPos] = state->deck[player][card];
       40:  187:		newDeckPos++;
      122:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 82
branch  1 taken 40 (fallthrough)
       82:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
       40:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
       44:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 40
branch  1 taken 4 (fallthrough)
       40:  195:		state->deck[player][i] = newDeck[i];
       40:  196:		state->deckCount[player]++;
        -:  197:	}
        4:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  285:int supplyCount(int card, struct gameState *state) {
    #####:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  309:int whoseTurn(struct gameState *state) {
        1:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
        2:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
        7:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        5:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
        2:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
        2:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
        2:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 1 returned 100% blocks executed 91%
        1:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
        5:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  420:		// Set unused player scores to -9999
        4:  421:		if (i >= state->numPlayers) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
        2:  425:			players[i] = scoreFor(i, state);
call    0 returned 2
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
        1:  430:	j = 0;
        5:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  432:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
        1:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
        1:  439:	currentPlayer = whoseTurn(state);
call    0 returned 1
        5:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
        1:  447:	j = 0;
        5:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  449:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
        1:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
        5:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  457:		if ( players[i] == highScore ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
        3:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
        1:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 10 returned 100% blocks executed 38%
       10:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
       10:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
       10:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
       10:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  516:	state->deckCount[player]--;
       10:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
       10:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 0 returned 0% blocks executed 0%
    #####:  522:int getCost(int cardNumber) {
    #####:  523:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
    #####:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
    #####:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
    #####:  557:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
    #####:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
    #####:  569:	switch( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
    #####:  576:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  577:				drawCard(currentPlayer, state);
call    0 never executed
        -:  578:			}
        -:  579:			// +1 Buy.
    #####:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
    #####:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  583:				if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####:  584:					drawCard(i, state);
call    0 never executed
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
    #####:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
    #####:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  641:				return -1;
        -:  642:			}
    #####:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:				return -1;
        -:  645:			}
    #####:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  647:				return -1;
        -:  648:			}
    #####:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  650:
        -:  651:			// Discard card from hand.
    #####:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  653:			// Discard trashed card.
    #####:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  656:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  657:					break;
        -:  658:				}
        -:  659:			}
    #####:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 0 returned 0% blocks executed 0%
    #####:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
    #####:  909:	int drawntreasure = 0;
    #####:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
    #####:  913:	while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 never executed
branch  1 never executed
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
    #####:  917:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
    #####:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  920:			drawntreasure++;
        -:  921:		else {
    #####:  922:			temphand[z] = cardDrawn;
    #####:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
    #####:  924:			z++;
        -:  925:		}
        -:  926:	}
    #####:  927:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
    #####:  929:		z = z - 1;
        -:  930:	}
    #####:  931:}
        -:  932:
        -:  933:
function runSmithy called 0 returned 0% blocks executed 0%
    #####:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
    #####:  937:	for (i = 3; i > 0; i--) {
branch  0 never executed
branch  1 never executed
    #####:  938:		drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	}
        -:  940:	// Discard card from hand.
    #####:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 never executed
    #####:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
    #####: 1058:	if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1059:		// Add card to played pile.
    #####: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
    #####: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
    #####: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 never executed
branch  1 never executed
        -: 1067:		// Reduce number of cards in hand.
    #####: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
    #####: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 never executed
branch  1 never executed
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
    #####: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
    #####: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
    #####: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
    #####: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
    #####: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
    #####: 1098:	if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1100:		state->deckCount[player]++;
        -: 1101:	}
    #####: 1102:	else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
    #####: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
    #####: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
    #####: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        2: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
       12: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 7 (fallthrough)
branch  1 taken 3
        7: 1124:			state->coins += 1;
        -: 1125:		}
        3: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1127:			state->coins += 2;
        -: 1128:		}
        3: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        2: 1134:	state->coins += bonus;
        -: 1135:
        2: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
Function discardCard() - TEST 1 SUCCESFULLY COMPLETED
Function discardCard() - TEST 2 FAILED - Potential bug!
Function discardCard() - TEST 3 SUCCESFULLY COMPLETED
Function discardCard() - TEST 4 SUCCESFULLY COMPLETED
Function discardCard() - TEST 5 SUCCESFULLY COMPLETED
Function discardCard() - TEST 6 SUCCESFULLY COMPLETED
Function discardCard() - TEST 7 SUCCESFULLY COMPLETED
Function discardCard() - TEST 8 FAILED - Potential bug!
Function discardCard() - TEST 9 FAILED - Potential bug!
File 'dominion.c'
Lines executed:25.61% of 570
Branches executed:28.78% of 417
Taken at least once:23.02% of 417
Calls executed:9.47% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 90 returned 100% blocks executed 83%
       90:    9:int compare(const void* a, const void* b) {
       90:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 90
    #####:   11:		return 1;
       90:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 24 (fallthrough)
branch  1 taken 66
       24:   13:		return -1;
       66:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 88%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        3:   42:	SelectStream(1);
call    0 returned 3
        3:   43:	PutSeed((long)randomSeed);
call    0 returned 3
        -:   44:  
        -:   45:	// Check number of players.
        3:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        3:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       33:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 30
branch  1 taken 3 (fallthrough)
      330:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 300
branch  1 taken 30 (fallthrough)
      300:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 270 (fallthrough)
branch  1 taken 30
branch  2 taken 0 (fallthrough)
branch  3 taken 270
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        3:   65:	if (numPlayers == 2) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        3:   76:	if (numPlayers == 2) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   77:		state->supplyCount[estate] = 8;
        3:   78:		state->supplyCount[duchy] = 8;
        3:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        3:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:   89:	state->supplyCount[silver] = 40;
        3:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
       63:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 60
branch  1 taken 3 (fallthrough)
      495:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 465
branch  1 taken 30 (fallthrough)
      465:   95:			if (kingdomCards[j] == i) {
branch  0 taken 30 (fallthrough)
branch  1 taken 435
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       30:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 30 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 27
        6:   98:					if (numPlayers == 2) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
       27:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       30:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
      435:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
        9:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        6:  119:		state->deckCount[i] = 0;
       24:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 18
branch  1 taken 6 (fallthrough)
       18:  121:			state->deck[i][j] = estate;
       18:  122:			state->deckCount[i]++;
        -:  123:		}
       48:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 42
branch  1 taken 6 (fallthrough)
       42:  125:			state->deck[i][j] = copper;
       42:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
        9:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        6:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
        9:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        -:  139:		// Initialize hand size to zero.
        6:  140:		state->handCount[i] = 0;
        6:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
       84:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 81
branch  1 taken 3 (fallthrough)
       81:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        3:  154:	state->outpostPlayed = 0;
        3:  155:	state->phase = 0;
        3:  156:	state->numActions = 1;
        3:  157:	state->numBuys = 1;
        3:  158:	state->playedCardCount = 0;
        3:  159:	state->whoseTurn = 0;
        3:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
       18:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 15
branch  1 taken 3 (fallthrough)
       15:  164:		drawCard(state->whoseTurn, state);
call    0 returned 15
        -:  165:	}
        -:  166:
        3:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 3
        -:  168:
        3:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 6 returned 100% blocks executed 94%
        6:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
        6:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
        6:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  179:		return -1;
        -:  180:
        6:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 6
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
       72:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 60
branch  1 taken 6 (fallthrough)
       60:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 60
       60:  186:		newDeck[newDeckPos] = state->deck[player][card];
       60:  187:		newDeckPos++;
      175:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 115
branch  1 taken 60 (fallthrough)
      115:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
       60:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
       66:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 60
branch  1 taken 6 (fallthrough)
       60:  195:		state->deck[player][i] = newDeck[i];
       60:  196:		state->deckCount[player]++;
        -:  197:	}
        6:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  285:int supplyCount(int card, struct gameState *state) {
    #####:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  309:int whoseTurn(struct gameState *state) {
        1:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
        2:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
        7:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        5:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
        2:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
        2:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
        2:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 1 returned 100% blocks executed 91%
        1:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
        5:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  420:		// Set unused player scores to -9999
        4:  421:		if (i >= state->numPlayers) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
        2:  425:			players[i] = scoreFor(i, state);
call    0 returned 2
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
        1:  430:	j = 0;
        5:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  432:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
        1:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
        1:  439:	currentPlayer = whoseTurn(state);
call    0 returned 1
        5:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
        1:  447:	j = 0;
        5:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  449:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
        1:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
        5:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  457:		if ( players[i] == highScore ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
        3:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
        1:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 15 returned 100% blocks executed 38%
       15:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
       15:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
       15:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
       15:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  516:	state->deckCount[player]--;
       15:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
       15:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 0 returned 0% blocks executed 0%
    #####:  522:int getCost(int cardNumber) {
    #####:  523:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
    #####:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
    #####:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
    #####:  557:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
    #####:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
    #####:  569:	switch( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
    #####:  576:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  577:				drawCard(currentPlayer, state);
call    0 never executed
        -:  578:			}
        -:  579:			// +1 Buy.
    #####:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
    #####:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  583:				if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####:  584:					drawCard(i, state);
call    0 never executed
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
    #####:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
    #####:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  641:				return -1;
        -:  642:			}
    #####:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:				return -1;
        -:  645:			}
    #####:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  647:				return -1;
        -:  648:			}
    #####:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  650:
        -:  651:			// Discard card from hand.
    #####:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  653:			// Discard trashed card.
    #####:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  656:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  657:					break;
        -:  658:				}
        -:  659:			}
    #####:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 0 returned 0% blocks executed 0%
    #####:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
    #####:  909:	int drawntreasure = 0;
    #####:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
    #####:  913:	while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 never executed
branch  1 never executed
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
    #####:  917:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
    #####:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  920:			drawntreasure++;
        -:  921:		else {
    #####:  922:			temphand[z] = cardDrawn;
    #####:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
    #####:  924:			z++;
        -:  925:		}
        -:  926:	}
    #####:  927:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
    #####:  929:		z = z - 1;
        -:  930:	}
    #####:  931:}
        -:  932:
        -:  933:
function runSmithy called 0 returned 0% blocks executed 0%
    #####:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
    #####:  937:	for (i = 3; i > 0; i--) {
branch  0 never executed
branch  1 never executed
    #####:  938:		drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	}
        -:  940:	// Discard card from hand.
    #####:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 never executed
    #####:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
        3: 1058:	if (trashFlag < 1) {
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 1059:		// Add card to played pile.
        2: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
        3: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
        3: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1067:		// Reduce number of cards in hand.
        1: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
        2: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
        2: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
        2: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
        2: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
        3: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
    #####: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
    #####: 1098:	if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1100:		state->deckCount[player]++;
        -: 1101:	}
    #####: 1102:	else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
    #####: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
    #####: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
    #####: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        3: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
       18: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 15
branch  1 taken 3 (fallthrough)
       15: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 10 (fallthrough)
branch  1 taken 5
       10: 1124:			state->coins += 1;
        -: 1125:		}
        5: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 1127:			state->coins += 2;
        -: 1128:		}
        5: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        3: 1134:	state->coins += bonus;
        -: 1135:
        3: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
Function gainCard() - TEST 1 SUCCESFULLY COMPLETED
Function gainCard() - TEST 2 SUCCESFULLY COMPLETED
Function gainCard() - TEST 3 SUCCESFULLY COMPLETED
Function gainCard() - TEST 4 FAILED - Potential bug!
Function gainCard() - TEST 5 SUCCESFULLY COMPLETED
Function gainCard() - TEST 6 FAILED - Potential bug!
Function gainCard() - TEST 7 SUCCESFULLY COMPLETED
Function gainCard() - TEST 8 FAILED - Potential bug!
Function gainCard() - TEST 9 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:28.25% of 570
Branches executed:30.22% of 417
Taken at least once:24.46% of 417
Calls executed:10.53% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 120 returned 100% blocks executed 83%
      120:    9:int compare(const void* a, const void* b) {
      120:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 120
    #####:   11:		return 1;
      120:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 32 (fallthrough)
branch  1 taken 88
       32:   13:		return -1;
       88:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 4 returned 100% blocks executed 88%
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        4:   42:	SelectStream(1);
call    0 returned 4
        4:   43:	PutSeed((long)randomSeed);
call    0 returned 4
        -:   44:  
        -:   45:	// Check number of players.
        4:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        4:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       44:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 40
branch  1 taken 4 (fallthrough)
      440:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 400
branch  1 taken 40 (fallthrough)
      400:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 360 (fallthrough)
branch  1 taken 40
branch  2 taken 0 (fallthrough)
branch  3 taken 360
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        4:   65:	if (numPlayers == 2) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        4:   76:	if (numPlayers == 2) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   77:		state->supplyCount[estate] = 8;
        4:   78:		state->supplyCount[duchy] = 8;
        4:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        4:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:   89:	state->supplyCount[silver] = 40;
        4:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
       84:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 80
branch  1 taken 4 (fallthrough)
      660:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 620
branch  1 taken 40 (fallthrough)
      620:   95:			if (kingdomCards[j] == i) {
branch  0 taken 40 (fallthrough)
branch  1 taken 580
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       40:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 40 (fallthrough)
branch  1 taken 0
branch  2 taken 4 (fallthrough)
branch  3 taken 36
        8:   98:					if (numPlayers == 2) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
       36:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       40:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
      580:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
       12:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        8:  119:		state->deckCount[i] = 0;
       32:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 24
branch  1 taken 8 (fallthrough)
       24:  121:			state->deck[i][j] = estate;
       24:  122:			state->deckCount[i]++;
        -:  123:		}
       64:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 56
branch  1 taken 8 (fallthrough)
       56:  125:			state->deck[i][j] = copper;
       56:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
       12:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        8:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
       12:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  139:		// Initialize hand size to zero.
        8:  140:		state->handCount[i] = 0;
        8:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
      112:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 108
branch  1 taken 4 (fallthrough)
      108:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        4:  154:	state->outpostPlayed = 0;
        4:  155:	state->phase = 0;
        4:  156:	state->numActions = 1;
        4:  157:	state->numBuys = 1;
        4:  158:	state->playedCardCount = 0;
        4:  159:	state->whoseTurn = 0;
        4:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
       24:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20:  164:		drawCard(state->whoseTurn, state);
call    0 returned 20
        -:  165:	}
        -:  166:
        4:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 4
        -:  168:
        4:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 8 returned 100% blocks executed 94%
        8:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
        8:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
        8:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:  179:		return -1;
        -:  180:
        8:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 8
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
       96:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
       80:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 80
       80:  186:		newDeck[newDeckPos] = state->deck[player][card];
       80:  187:		newDeckPos++;
      238:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 158
branch  1 taken 80 (fallthrough)
      158:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
       80:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
       88:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
       80:  195:		state->deck[player][i] = newDeck[i];
       80:  196:		state->deckCount[player]++;
        -:  197:	}
        8:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  285:int supplyCount(int card, struct gameState *state) {
        6:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  309:int whoseTurn(struct gameState *state) {
        1:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
        2:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
        7:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        5:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
        2:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
        2:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
        2:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 1 returned 100% blocks executed 91%
        1:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
        5:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  420:		// Set unused player scores to -9999
        4:  421:		if (i >= state->numPlayers) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
        2:  425:			players[i] = scoreFor(i, state);
call    0 returned 2
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
        1:  430:	j = 0;
        5:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  432:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
        1:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
        1:  439:	currentPlayer = whoseTurn(state);
call    0 returned 1
        5:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
        1:  447:	j = 0;
        5:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  449:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
        1:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
        5:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  457:		if ( players[i] == highScore ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
        3:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
        1:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 20 returned 100% blocks executed 38%
       20:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
       20:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
       20:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
       20:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  516:	state->deckCount[player]--;
       20:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
       20:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 0 returned 0% blocks executed 0%
    #####:  522:int getCost(int cardNumber) {
    #####:  523:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
    #####:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
    #####:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
    #####:  557:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
    #####:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
    #####:  569:	switch( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
    #####:  576:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  577:				drawCard(currentPlayer, state);
call    0 never executed
        -:  578:			}
        -:  579:			// +1 Buy.
    #####:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
    #####:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  583:				if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####:  584:					drawCard(i, state);
call    0 never executed
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
    #####:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
    #####:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  641:				return -1;
        -:  642:			}
    #####:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:				return -1;
        -:  645:			}
    #####:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  647:				return -1;
        -:  648:			}
    #####:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  650:
        -:  651:			// Discard card from hand.
    #####:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  653:			// Discard trashed card.
    #####:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  656:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  657:					break;
        -:  658:				}
        -:  659:			}
    #####:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 0 returned 0% blocks executed 0%
    #####:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
    #####:  909:	int drawntreasure = 0;
    #####:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
    #####:  913:	while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 never executed
branch  1 never executed
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
    #####:  917:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
    #####:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  920:			drawntreasure++;
        -:  921:		else {
    #####:  922:			temphand[z] = cardDrawn;
    #####:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
    #####:  924:			z++;
        -:  925:		}
        -:  926:	}
    #####:  927:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
    #####:  929:		z = z - 1;
        -:  930:	}
    #####:  931:}
        -:  932:
        -:  933:
function runSmithy called 0 returned 0% blocks executed 0%
    #####:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
    #####:  937:	for (i = 3; i > 0; i--) {
branch  0 never executed
branch  1 never executed
    #####:  938:		drawCard(currentPlayer, state);
call    0 never executed
        -:  939:	}
        -:  940:	// Discard card from hand.
    #####:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 never executed
    #####:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
        3: 1058:	if (trashFlag < 1) {
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 1059:		// Add card to played pile.
        2: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
        3: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
        3: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1067:		// Reduce number of cards in hand.
        1: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
        2: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
        2: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
        2: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
        2: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
        3: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
        6: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
        4: 1098:	if (toFlag == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1100:		state->deckCount[player]++;
        -: 1101:	}
        3: 1102:	else if (toFlag == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
        2: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
        4: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
        4: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        4: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
       24: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 14 (fallthrough)
branch  1 taken 6
       14: 1124:			state->coins += 1;
        -: 1125:		}
        6: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 1127:			state->coins += 2;
        -: 1128:		}
        6: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        4: 1134:	state->coins += bonus;
        -: 1135:
        4: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
Card Smithy - TEST 1 SUCCESFULLY COMPLETED
Card Smithy - TEST 2 SUCCESFULLY COMPLETED
Card Smithy - TEST 3 SUCCESFULLY COMPLETED
Card Smithy - TEST 4 SUCCESFULLY COMPLETED
Card Smithy - TEST 5 SUCCESFULLY COMPLETED
Card Smithy - TEST 6 SUCCESFULLY COMPLETED
Card Smithy - TEST 7 SUCCESFULLY COMPLETED
Card Smithy - TEST 8 SUCCESFULLY COMPLETED
Card Smithy - TEST 9 SUCCESFULLY COMPLETED
Card Smithy - TEST 10 SUCCESFULLY COMPLETED
Card Smithy - TEST 11 SUCCESFULLY COMPLETED
Card Smithy - TEST 12 SUCCESFULLY COMPLETED
Card Smithy - TEST 13 SUCCESFULLY COMPLETED
Card Smithy - TEST 14 SUCCESFULLY COMPLETED
Card Smithy - TEST 15 SUCCESFULLY COMPLETED
Card Smithy - TEST 16 SUCCESFULLY COMPLETED
Card Smithy - TEST 17 SUCCESFULLY COMPLETED
Card Smithy - TEST 18 SUCCESFULLY COMPLETED
Card Smithy - TEST 19 SUCCESFULLY COMPLETED
Card Smithy - TEST 20 SUCCESFULLY COMPLETED
Card Smithy - TEST 21 SUCCESFULLY COMPLETED
Card Smithy - TEST 22 SUCCESFULLY COMPLETED
Card Smithy - TEST 23 SUCCESFULLY COMPLETED
Card Smithy - TEST 24 SUCCESFULLY COMPLETED
Card Smithy - TEST 25 SUCCESFULLY COMPLETED
Card Smithy - TEST 26 SUCCESFULLY COMPLETED
Card Smithy - TEST 27 SUCCESFULLY COMPLETED
Card Smithy - TEST 28 SUCCESFULLY COMPLETED
Card Smithy - TEST 29 SUCCESFULLY COMPLETED
Card Smithy - TEST 30 SUCCESFULLY COMPLETED
Card Smithy - TEST 31 SUCCESFULLY COMPLETED
Card Smithy - TEST 32 SUCCESFULLY COMPLETED
Card Smithy - TEST 33 SUCCESFULLY COMPLETED
Card Smithy - TEST 34 SUCCESFULLY COMPLETED
Card Smithy - TEST 35 SUCCESFULLY COMPLETED
Card Smithy - TEST 36 SUCCESFULLY COMPLETED
Card Smithy - TEST 37 SUCCESFULLY COMPLETED
Card Smithy - TEST 38 SUCCESFULLY COMPLETED
Card Smithy - TEST 39 SUCCESFULLY COMPLETED
Card Smithy - TEST 40 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:29.12% of 570
Branches executed:30.70% of 417
Taken at least once:24.94% of 417
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 150 returned 100% blocks executed 83%
      150:    9:int compare(const void* a, const void* b) {
      150:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
    #####:   11:		return 1;
      150:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 40 (fallthrough)
branch  1 taken 110
       40:   13:		return -1;
      110:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        5:   42:	SelectStream(1);
call    0 returned 5
        5:   43:	PutSeed((long)randomSeed);
call    0 returned 5
        -:   44:  
        -:   45:	// Check number of players.
        5:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 5 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        5:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       55:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 50
branch  1 taken 5 (fallthrough)
      550:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 500
branch  1 taken 50 (fallthrough)
      500:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 450 (fallthrough)
branch  1 taken 50
branch  2 taken 0 (fallthrough)
branch  3 taken 450
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        5:   65:	if (numPlayers == 2) {
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        5:   76:	if (numPlayers == 2) {
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:   77:		state->supplyCount[estate] = 8;
        5:   78:		state->supplyCount[duchy] = 8;
        5:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        5:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:   89:	state->supplyCount[silver] = 40;
        5:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
      105:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 100
branch  1 taken 5 (fallthrough)
      825:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 775
branch  1 taken 50 (fallthrough)
      775:   95:			if (kingdomCards[j] == i) {
branch  0 taken 50 (fallthrough)
branch  1 taken 725
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       50:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 50 (fallthrough)
branch  1 taken 0
branch  2 taken 5 (fallthrough)
branch  3 taken 45
       10:   98:					if (numPlayers == 2) {
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
       45:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       50:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
      725:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
       15:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 10
branch  1 taken 5 (fallthrough)
       10:  119:		state->deckCount[i] = 0;
       40:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 30
branch  1 taken 10 (fallthrough)
       30:  121:			state->deck[i][j] = estate;
       30:  122:			state->deckCount[i]++;
        -:  123:		}
       80:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 70
branch  1 taken 10 (fallthrough)
       70:  125:			state->deck[i][j] = copper;
       70:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
       15:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 10
branch  1 taken 5 (fallthrough)
       10:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
       15:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 10
branch  1 taken 5 (fallthrough)
        -:  139:		// Initialize hand size to zero.
       10:  140:		state->handCount[i] = 0;
       10:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
      140:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 135
branch  1 taken 5 (fallthrough)
      135:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        5:  154:	state->outpostPlayed = 0;
        5:  155:	state->phase = 0;
        5:  156:	state->numActions = 1;
        5:  157:	state->numBuys = 1;
        5:  158:	state->playedCardCount = 0;
        5:  159:	state->whoseTurn = 0;
        5:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
       30:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 25
branch  1 taken 5 (fallthrough)
       25:  164:		drawCard(state->whoseTurn, state);
call    0 returned 25
        -:  165:	}
        -:  166:
        5:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 5
        -:  168:
        5:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 10 returned 100% blocks executed 94%
       10:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
       10:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
       10:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:  179:		return -1;
        -:  180:
       10:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 10
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
      120:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 100
      100:  186:		newDeck[newDeckPos] = state->deck[player][card];
      100:  187:		newDeckPos++;
      311:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 211
branch  1 taken 100 (fallthrough)
      211:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
      100:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
      110:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:  195:		state->deck[player][i] = newDeck[i];
      100:  196:		state->deckCount[player]++;
        -:  197:	}
       10:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  285:int supplyCount(int card, struct gameState *state) {
        6:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  309:int whoseTurn(struct gameState *state) {
        1:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
        2:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
        7:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        5:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
        2:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
        2:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
        2:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 1 returned 100% blocks executed 91%
        1:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
        5:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  420:		// Set unused player scores to -9999
        4:  421:		if (i >= state->numPlayers) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
        2:  425:			players[i] = scoreFor(i, state);
call    0 returned 2
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
        1:  430:	j = 0;
        5:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  432:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
        1:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
        1:  439:	currentPlayer = whoseTurn(state);
call    0 returned 1
        5:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
        1:  447:	j = 0;
        5:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  449:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
        1:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
        5:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  457:		if ( players[i] == highScore ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
        3:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
        1:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 37 returned 100% blocks executed 38%
       37:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
       37:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 37
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
       37:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
       37:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
       37:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       37:  516:	state->deckCount[player]--;
       37:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
       37:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 0 returned 0% blocks executed 0%
    #####:  522:int getCost(int cardNumber) {
    #####:  523:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
    #####:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
    #####:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
    #####:  557:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
    #####:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
    #####:  569:	switch( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
    #####:  576:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  577:				drawCard(currentPlayer, state);
call    0 never executed
        -:  578:			}
        -:  579:			// +1 Buy.
    #####:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
    #####:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  583:				if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####:  584:					drawCard(i, state);
call    0 never executed
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
    #####:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
    #####:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  641:				return -1;
        -:  642:			}
    #####:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:				return -1;
        -:  645:			}
    #####:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  647:				return -1;
        -:  648:			}
    #####:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  650:
        -:  651:			// Discard card from hand.
    #####:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  653:			// Discard trashed card.
    #####:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  656:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  657:					break;
        -:  658:				}
        -:  659:			}
    #####:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 0 returned 0% blocks executed 0%
    #####:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
    #####:  909:	int drawntreasure = 0;
    #####:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
    #####:  913:	while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 never executed
branch  1 never executed
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
    #####:  917:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
    #####:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  920:			drawntreasure++;
        -:  921:		else {
    #####:  922:			temphand[z] = cardDrawn;
    #####:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
    #####:  924:			z++;
        -:  925:		}
        -:  926:	}
    #####:  927:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
    #####:  929:		z = z - 1;
        -:  930:	}
    #####:  931:}
        -:  932:
        -:  933:
function runSmithy called 4 returned 100% blocks executed 100%
        4:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
       16:  937:	for (i = 3; i > 0; i--) {
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:  938:		drawCard(currentPlayer, state);
call    0 returned 12
        -:  939:	}
        -:  940:	// Discard card from hand.
        4:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 returned 4
        4:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 7 returned 100% blocks executed 89%
        7: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
        7: 1058:	if (trashFlag < 1) {
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        -: 1059:		// Add card to played pile.
        6: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
        7: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
        7: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        -: 1067:		// Reduce number of cards in hand.
        1: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
        6: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
        6: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
        6: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
        6: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
        7: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
        6: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
        4: 1098:	if (toFlag == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1100:		state->deckCount[player]++;
        -: 1101:	}
        3: 1102:	else if (toFlag == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
        2: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
        4: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
        4: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 5 returned 100% blocks executed 82%
        5: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        5: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
       30: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 25
branch  1 taken 5 (fallthrough)
       25: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 19 (fallthrough)
branch  1 taken 6
       19: 1124:			state->coins += 1;
        -: 1125:		}
        6: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 1127:			state->coins += 2;
        -: 1128:		}
        6: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        5: 1134:	state->coins += bonus;
        -: 1135:
        5: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
Card Adventurer - TEST 1 SUCCESFULLY COMPLETED
Card Adventurer - TEST 2 SUCCESFULLY COMPLETED
Card Adventurer - TEST 3 FAILED - Potential bug!
Card Adventurer - TEST 4 FAILED - Potential bug!
Card Adventurer - TEST 5 SUCCESFULLY COMPLETED
Card Adventurer - TEST 6 SUCCESFULLY COMPLETED
Card Adventurer - TEST 7 SUCCESFULLY COMPLETED
Card Adventurer - TEST 8 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:31.93% of 570
Branches executed:33.57% of 417
Taken at least once:27.10% of 417
Calls executed:13.68% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 180 returned 100% blocks executed 83%
      180:    9:int compare(const void* a, const void* b) {
      180:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 180
    #####:   11:		return 1;
      180:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 48 (fallthrough)
branch  1 taken 132
       48:   13:		return -1;
      132:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 88%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        6:   42:	SelectStream(1);
call    0 returned 6
        6:   43:	PutSeed((long)randomSeed);
call    0 returned 6
        -:   44:  
        -:   45:	// Check number of players.
        6:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 6 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        6:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       66:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 60
branch  1 taken 6 (fallthrough)
      660:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 600
branch  1 taken 60 (fallthrough)
      600:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 540 (fallthrough)
branch  1 taken 60
branch  2 taken 0 (fallthrough)
branch  3 taken 540
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        6:   65:	if (numPlayers == 2) {
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        6:   76:	if (numPlayers == 2) {
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   77:		state->supplyCount[estate] = 8;
        6:   78:		state->supplyCount[duchy] = 8;
        6:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        6:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:   89:	state->supplyCount[silver] = 40;
        6:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
      126:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 120
branch  1 taken 6 (fallthrough)
      990:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 930
branch  1 taken 60 (fallthrough)
      930:   95:			if (kingdomCards[j] == i) {
branch  0 taken 60 (fallthrough)
branch  1 taken 870
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       60:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 60 (fallthrough)
branch  1 taken 0
branch  2 taken 6 (fallthrough)
branch  3 taken 54
       12:   98:					if (numPlayers == 2) {
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
       54:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       60:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
      870:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
       18:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 12
branch  1 taken 6 (fallthrough)
       12:  119:		state->deckCount[i] = 0;
       48:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 36
branch  1 taken 12 (fallthrough)
       36:  121:			state->deck[i][j] = estate;
       36:  122:			state->deckCount[i]++;
        -:  123:		}
       96:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 84
branch  1 taken 12 (fallthrough)
       84:  125:			state->deck[i][j] = copper;
       84:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
       18:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 12
branch  1 taken 6 (fallthrough)
       12:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
       18:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  139:		// Initialize hand size to zero.
       12:  140:		state->handCount[i] = 0;
       12:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
      168:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 162
branch  1 taken 6 (fallthrough)
      162:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        6:  154:	state->outpostPlayed = 0;
        6:  155:	state->phase = 0;
        6:  156:	state->numActions = 1;
        6:  157:	state->numBuys = 1;
        6:  158:	state->playedCardCount = 0;
        6:  159:	state->whoseTurn = 0;
        6:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
       36:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 30
branch  1 taken 6 (fallthrough)
       30:  164:		drawCard(state->whoseTurn, state);
call    0 returned 30
        -:  165:	}
        -:  166:
        6:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 6
        -:  168:
        6:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 12 returned 100% blocks executed 94%
       12:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
       12:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
       12:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####:  179:		return -1;
        -:  180:
       12:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 12
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
      144:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 120
branch  1 taken 12 (fallthrough)
      120:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 120
      120:  186:		newDeck[newDeckPos] = state->deck[player][card];
      120:  187:		newDeckPos++;
      364:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 244
branch  1 taken 120 (fallthrough)
      244:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
      120:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
      132:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 120
branch  1 taken 12 (fallthrough)
      120:  195:		state->deck[player][i] = newDeck[i];
      120:  196:		state->deckCount[player]++;
        -:  197:	}
       12:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  285:int supplyCount(int card, struct gameState *state) {
        6:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  309:int whoseTurn(struct gameState *state) {
        1:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
        2:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
        7:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        5:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
        2:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
        2:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
        2:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 1 returned 100% blocks executed 91%
        1:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
        5:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  420:		// Set unused player scores to -9999
        4:  421:		if (i >= state->numPlayers) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
        2:  425:			players[i] = scoreFor(i, state);
call    0 returned 2
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
        1:  430:	j = 0;
        5:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  432:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
        1:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
        1:  439:	currentPlayer = whoseTurn(state);
call    0 returned 1
        5:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
        1:  447:	j = 0;
        5:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  449:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
        1:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
        5:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  457:		if ( players[i] == highScore ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
        3:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
        1:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 48 returned 100% blocks executed 38%
       48:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
       48:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 48
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
       48:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
       48:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
       48:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       48:  516:	state->deckCount[player]--;
       48:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
       48:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 0 returned 0% blocks executed 0%
    #####:  522:int getCost(int cardNumber) {
    #####:  523:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
    #####:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
    #####:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
    #####:  557:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
    #####:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
    #####:  569:	switch( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
    #####:  576:			for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  577:				drawCard(currentPlayer, state);
call    0 never executed
        -:  578:			}
        -:  579:			// +1 Buy.
    #####:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
    #####:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  583:				if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####:  584:					drawCard(i, state);
call    0 never executed
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
    #####:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
    #####:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  641:				return -1;
        -:  642:			}
    #####:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:				return -1;
        -:  645:			}
    #####:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  647:				return -1;
        -:  648:			}
    #####:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  650:
        -:  651:			// Discard card from hand.
    #####:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  653:			// Discard trashed card.
    #####:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  656:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  657:					break;
        -:  658:				}
        -:  659:			}
    #####:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 2 returned 100% blocks executed 93%
        2:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
        2:  909:	int drawntreasure = 0;
        2:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
       10:  913:	while (drawntreasure < 2) {
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
        6:  917:		drawCard(currentPlayer, state);
call    0 returned 6
        6:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
        6:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        4:  920:			drawntreasure++;
        -:  921:		else {
        2:  922:			temphand[z] = cardDrawn;
        2:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
        2:  924:			z++;
        -:  925:		}
        -:  926:	}
        6:  927:	while (z - 1 >= 0) {
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        2:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
        2:  929:		z = z - 1;
        -:  930:	}
        2:  931:}
        -:  932:
        -:  933:
function runSmithy called 4 returned 100% blocks executed 100%
        4:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
       16:  937:	for (i = 3; i > 0; i--) {
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:  938:		drawCard(currentPlayer, state);
call    0 returned 12
        -:  939:	}
        -:  940:	// Discard card from hand.
        4:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 returned 4
        4:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 7 returned 100% blocks executed 89%
        7: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
        7: 1058:	if (trashFlag < 1) {
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        -: 1059:		// Add card to played pile.
        6: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
        7: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
        7: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        -: 1067:		// Reduce number of cards in hand.
        1: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
        6: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
        6: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
        6: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
        6: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
        7: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
        6: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
        4: 1098:	if (toFlag == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1100:		state->deckCount[player]++;
        -: 1101:	}
        3: 1102:	else if (toFlag == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
        2: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
        4: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
        4: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 6 returned 100% blocks executed 82%
        6: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        6: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
       36: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 30
branch  1 taken 6 (fallthrough)
       30: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 22 (fallthrough)
branch  1 taken 8
       22: 1124:			state->coins += 1;
        -: 1125:		}
        8: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1127:			state->coins += 2;
        -: 1128:		}
        8: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        6: 1134:	state->coins += bonus;
        -: 1135:
        6: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
Card Council_room - TEST 0 SUCCESFULLY COMPLETED
Card Council_room - TEST 1 SUCCESFULLY COMPLETED
Card Council_room - TEST 2 SUCCESFULLY COMPLETED
Card Council_room - TEST 3 FAILED - Potential bug!
Card Council_room - TEST 4 SUCCESFULLY COMPLETED
Card Council_room - TEST 5 SUCCESFULLY COMPLETED
Card Council_room - TEST 6 SUCCESFULLY COMPLETED
Card Council_room - TEST 7 SUCCESFULLY COMPLETED
Card Council_room - TEST 8 SUCCESFULLY COMPLETED
Card Council_room - TEST 9 SUCCESFULLY COMPLETED
Card Council_room - TEST 10 SUCCESFULLY COMPLETED
Card Council_room - TEST 11 SUCCESFULLY COMPLETED
Card Council_room - TEST 12 SUCCESFULLY COMPLETED
Card Council_room - TEST 13 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:34.21% of 570
Branches executed:40.53% of 417
Taken at least once:29.02% of 417
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 210 returned 100% blocks executed 83%
      210:    9:int compare(const void* a, const void* b) {
      210:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 210
    #####:   11:		return 1;
      210:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 56 (fallthrough)
branch  1 taken 154
       56:   13:		return -1;
      154:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 88%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        7:   42:	SelectStream(1);
call    0 returned 7
        7:   43:	PutSeed((long)randomSeed);
call    0 returned 7
        -:   44:  
        -:   45:	// Check number of players.
        7:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        7:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       77:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 70
branch  1 taken 7 (fallthrough)
      770:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 700
branch  1 taken 70 (fallthrough)
      700:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 630 (fallthrough)
branch  1 taken 70
branch  2 taken 0 (fallthrough)
branch  3 taken 630
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        7:   65:	if (numPlayers == 2) {
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        7:   76:	if (numPlayers == 2) {
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   77:		state->supplyCount[estate] = 8;
        7:   78:		state->supplyCount[duchy] = 8;
        7:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        7:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:   89:	state->supplyCount[silver] = 40;
        7:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
      147:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 140
branch  1 taken 7 (fallthrough)
     1155:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 1085
branch  1 taken 70 (fallthrough)
     1085:   95:			if (kingdomCards[j] == i) {
branch  0 taken 70 (fallthrough)
branch  1 taken 1015
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       70:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 70 (fallthrough)
branch  1 taken 0
branch  2 taken 7 (fallthrough)
branch  3 taken 63
       14:   98:					if (numPlayers == 2) {
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
       63:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       70:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
     1015:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
       21:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 14
branch  1 taken 7 (fallthrough)
       14:  119:		state->deckCount[i] = 0;
       56:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 42
branch  1 taken 14 (fallthrough)
       42:  121:			state->deck[i][j] = estate;
       42:  122:			state->deckCount[i]++;
        -:  123:		}
      112:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 98
branch  1 taken 14 (fallthrough)
       98:  125:			state->deck[i][j] = copper;
       98:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
       21:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 14
branch  1 taken 7 (fallthrough)
       14:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
       21:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 14
branch  1 taken 7 (fallthrough)
        -:  139:		// Initialize hand size to zero.
       14:  140:		state->handCount[i] = 0;
       14:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
      196:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 189
branch  1 taken 7 (fallthrough)
      189:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        7:  154:	state->outpostPlayed = 0;
        7:  155:	state->phase = 0;
        7:  156:	state->numActions = 1;
        7:  157:	state->numBuys = 1;
        7:  158:	state->playedCardCount = 0;
        7:  159:	state->whoseTurn = 0;
        7:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
       42:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 35
branch  1 taken 7 (fallthrough)
       35:  164:		drawCard(state->whoseTurn, state);
call    0 returned 35
        -:  165:	}
        -:  166:
        7:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 7
        -:  168:
        7:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 14 returned 100% blocks executed 94%
       14:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
       14:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
       14:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####:  179:		return -1;
        -:  180:
       14:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 14
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
      168:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 140
branch  1 taken 14 (fallthrough)
      140:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 140
      140:  186:		newDeck[newDeckPos] = state->deck[player][card];
      140:  187:		newDeckPos++;
      429:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 289
branch  1 taken 140 (fallthrough)
      289:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
      140:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
      154:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 140
branch  1 taken 14 (fallthrough)
      140:  195:		state->deck[player][i] = newDeck[i];
      140:  196:		state->deckCount[player]++;
        -:  197:	}
       14:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  285:int supplyCount(int card, struct gameState *state) {
        6:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  309:int whoseTurn(struct gameState *state) {
        5:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
        2:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
        7:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        5:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
        2:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
        2:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
        2:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 1 returned 100% blocks executed 91%
        1:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
        5:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  420:		// Set unused player scores to -9999
        4:  421:		if (i >= state->numPlayers) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
        2:  425:			players[i] = scoreFor(i, state);
call    0 returned 2
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
        1:  430:	j = 0;
        5:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  432:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
        1:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
        1:  439:	currentPlayer = whoseTurn(state);
call    0 returned 1
        5:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
        1:  447:	j = 0;
        5:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  449:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
        1:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
        5:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  457:		if ( players[i] == highScore ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
        3:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
        1:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 63 returned 100% blocks executed 38%
       63:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
       63:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 63
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
       63:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
       63:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
       63:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       63:  516:	state->deckCount[player]--;
       63:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
       63:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 0 returned 0% blocks executed 0%
    #####:  522:int getCost(int cardNumber) {
    #####:  523:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
    #####:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
    #####:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 2 returned 100% blocks executed 8%
        2:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
        2:  557:	int currentPlayer = whoseTurn(state);
call    0 returned 2
        2:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
        2:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
        2:  569:	switch( card ) {
branch  0 taken 0
branch  1 taken 2
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
       10:  576:			for (i = 0; i < 4; i++) {
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        8:  577:				drawCard(currentPlayer, state);
call    0 returned 8
        -:  578:			}
        -:  579:			// +1 Buy.
        2:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
        6:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:  583:				if ( i != currentPlayer ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  584:					drawCard(i, state);
call    0 returned 2
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
        2:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        2:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
    #####:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  641:				return -1;
        -:  642:			}
    #####:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:				return -1;
        -:  645:			}
    #####:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  647:				return -1;
        -:  648:			}
    #####:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  650:
        -:  651:			// Discard card from hand.
    #####:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  653:			// Discard trashed card.
    #####:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  656:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  657:					break;
        -:  658:				}
        -:  659:			}
    #####:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 2 returned 100% blocks executed 93%
        2:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
        2:  909:	int drawntreasure = 0;
        2:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
       10:  913:	while (drawntreasure < 2) {
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
        6:  917:		drawCard(currentPlayer, state);
call    0 returned 6
        6:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
        6:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        4:  920:			drawntreasure++;
        -:  921:		else {
        2:  922:			temphand[z] = cardDrawn;
        2:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
        2:  924:			z++;
        -:  925:		}
        -:  926:	}
        6:  927:	while (z - 1 >= 0) {
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        2:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
        2:  929:		z = z - 1;
        -:  930:	}
        2:  931:}
        -:  932:
        -:  933:
function runSmithy called 4 returned 100% blocks executed 100%
        4:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
       16:  937:	for (i = 3; i > 0; i--) {
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:  938:		drawCard(currentPlayer, state);
call    0 returned 12
        -:  939:	}
        -:  940:	// Discard card from hand.
        4:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 returned 4
        4:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 9 returned 100% blocks executed 89%
        9: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
        9: 1058:	if (trashFlag < 1) {
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -: 1059:		// Add card to played pile.
        8: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
        9: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
        9: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        -: 1067:		// Reduce number of cards in hand.
        1: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
        8: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
        8: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
        8: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
        8: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
        9: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
        6: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
        4: 1098:	if (toFlag == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1100:		state->deckCount[player]++;
        -: 1101:	}
        3: 1102:	else if (toFlag == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
        2: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
        4: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
        4: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 7 returned 100% blocks executed 82%
        7: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        7: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
       42: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 35
branch  1 taken 7 (fallthrough)
       35: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 25 (fallthrough)
branch  1 taken 10
       25: 1124:			state->coins += 1;
        -: 1125:		}
       10: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####: 1127:			state->coins += 2;
        -: 1128:		}
       10: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        7: 1134:	state->coins += bonus;
        -: 1135:
        7: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
Card Mine - TEST 1 SUCCESFULLY COMPLETED
Card Mine - TEST 2 FAILED - Potential bug!
Card Mine - TEST 3 SUCCESFULLY COMPLETED
Card Mine - TEST 4 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:36.84% of 570
Branches executed:50.60% of 417
Taken at least once:31.65% of 417
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 240 returned 100% blocks executed 83%
      240:    9:int compare(const void* a, const void* b) {
      240:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 240
    #####:   11:		return 1;
      240:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 64 (fallthrough)
branch  1 taken 176
       64:   13:		return -1;
      176:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        8:   42:	SelectStream(1);
call    0 returned 8
        8:   43:	PutSeed((long)randomSeed);
call    0 returned 8
        -:   44:  
        -:   45:	// Check number of players.
        8:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 8
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        8:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       88:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
      880:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 800
branch  1 taken 80 (fallthrough)
      800:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 720 (fallthrough)
branch  1 taken 80
branch  2 taken 0 (fallthrough)
branch  3 taken 720
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        8:   65:	if (numPlayers == 2) {
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
    #####:   68:	else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
    #####:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        8:   76:	if (numPlayers == 2) {
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:   77:		state->supplyCount[estate] = 8;
        8:   78:		state->supplyCount[duchy] = 8;
        8:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
    #####:   82:		state->supplyCount[estate] = 12;
    #####:   83:		state->supplyCount[duchy] = 12;
    #####:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        8:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:   89:	state->supplyCount[silver] = 40;
        8:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
      168:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 160
branch  1 taken 8 (fallthrough)
     1320:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 1240
branch  1 taken 80 (fallthrough)
     1240:   95:			if (kingdomCards[j] == i) {
branch  0 taken 80 (fallthrough)
branch  1 taken 1160
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       80:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 80 (fallthrough)
branch  1 taken 0
branch  2 taken 8 (fallthrough)
branch  3 taken 72
       16:   98:					if (numPlayers == 2) {
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
    #####:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
       72:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       80:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
     1160:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
       24:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 16
branch  1 taken 8 (fallthrough)
       16:  119:		state->deckCount[i] = 0;
       64:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 48
branch  1 taken 16 (fallthrough)
       48:  121:			state->deck[i][j] = estate;
       48:  122:			state->deckCount[i]++;
        -:  123:		}
      128:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 112
branch  1 taken 16 (fallthrough)
      112:  125:			state->deck[i][j] = copper;
      112:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
       24:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 16
branch  1 taken 8 (fallthrough)
       16:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 16
branch  1 taken 0 (fallthrough)
branch  2 taken 16
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
       24:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 16
branch  1 taken 8 (fallthrough)
        -:  139:		// Initialize hand size to zero.
       16:  140:		state->handCount[i] = 0;
       16:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
      224:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 216
branch  1 taken 8 (fallthrough)
      216:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        8:  154:	state->outpostPlayed = 0;
        8:  155:	state->phase = 0;
        8:  156:	state->numActions = 1;
        8:  157:	state->numBuys = 1;
        8:  158:	state->playedCardCount = 0;
        8:  159:	state->whoseTurn = 0;
        8:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
       48:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 40
branch  1 taken 8 (fallthrough)
       40:  164:		drawCard(state->whoseTurn, state);
call    0 returned 40
        -:  165:	}
        -:  166:
        8:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 8
        -:  168:
        8:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 16 returned 100% blocks executed 94%
       16:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
       16:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
       16:  178:	if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####:  179:		return -1;
        -:  180:
       16:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 16
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
      192:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 160
branch  1 taken 16 (fallthrough)
      160:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 160
      160:  186:		newDeck[newDeckPos] = state->deck[player][card];
      160:  187:		newDeckPos++;
      506:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 346
branch  1 taken 160 (fallthrough)
      346:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
      160:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
      176:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 160
branch  1 taken 16 (fallthrough)
      160:  195:		state->deck[player][i] = newDeck[i];
      160:  196:		state->deckCount[player]++;
        -:  197:	}
       16:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 7 returned 100% blocks executed 100%
        7:  285:int supplyCount(int card, struct gameState *state) {
        7:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  309:int whoseTurn(struct gameState *state) {
        6:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
        4:  356:	if (state->supplyCount[province] == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
        3:  361:	j = 0;
       78:  362:	for (i = 0; i < 25; i++) {
branch  0 taken 75
branch  1 taken 3 (fallthrough)
       75:  363:		if (state->supplyCount[i] == 0) {
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        5:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
        3:  368:	if ( j >= 3 ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  369:		return 1;
        -:  370:    }
        -:  371:
        2:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
        2:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
        7:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 2 (fallthrough)
        5:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        5:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        5:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 5
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
        2:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
        2:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
        2:  409:	return score;
        -:  410:}
        -:  411:
function getWinners called 1 returned 100% blocks executed 91%
        1:  412:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  413:	int i;	
        -:  414:	int j;
        -:  415:	int highScore;
        -:  416:	int currentPlayer;
        -:  417:
        -:  418:	// Get score for each player.
        5:  419:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  420:		// Set unused player scores to -9999
        4:  421:		if (i >= state->numPlayers) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  422:			players[i] = -9999;
        -:  423:		}
        -:  424:		else {
        2:  425:			players[i] = scoreFor(i, state);
call    0 returned 2
        -:  426:		}
        -:  427:	}
        -:  428:
        -:  429:	// Find highest score.
        1:  430:	j = 0;
        5:  431:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  432:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  433:			j = i;
        -:  434:		}
        -:  435:	}
        1:  436:	highScore = players[j];
        -:  437:
        -:  438:	// Add 1 to players who had less turns.
        1:  439:	currentPlayer = whoseTurn(state);
call    0 returned 1
        5:  440:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  441:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  442:			players[i]++;
        -:  443:		}
        -:  444:	}
        -:  445:
        -:  446:	// Find new highest score.
        1:  447:	j = 0;
        5:  448:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  449:		if (players[i] > players[j]) {
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  450:			j = i;
        -:  451:		}
        -:  452:	}
        1:  453:	highScore = players[j];
        -:  454:
        -:  455:	// Set winners in array to 1 and rest to 0.
        5:  456:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  457:		if ( players[i] == highScore ) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  458:			players[i] = 1;
        -:  459:		}
        -:  460:		else {
        3:  461:			players[i] = 0;
        -:  462:		}
        -:  463:	}
        -:  464:
        1:  465:	return 0;
        -:  466:}
        -:  467:
function drawCard called 68 returned 100% blocks executed 38%
       68:  468:int drawCard(int player, struct gameState *state) {
        -:  469:	int count;
        -:  470:	int deckCounter;
       68:  471:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 0 (fallthrough)
branch  1 taken 68
        -:  472:		// Step 1: Shuffle the discard pile back into a deck.
        -:  473:		int i;
        -:  474:		// Move discard to deck.
    #####:  475:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 never executed
branch  1 never executed
    #####:  476:			state->deck[player][i] = state->discard[player][i];
    #####:  477:			state->discard[player][i] = -1;
        -:  478:		}
        -:  479:
    #####:  480:		state->deckCount[player] = state->discardCount[player];
    #####:  481:		state->discardCount[player] = 0; // Reset discard.
        -:  482:
        -:  483:		// Shufffle the deck.
    #####:  484:		shuffle(player, state);
call    0 never executed
        -:  485:   
        -:  486:	    if (DEBUG){
        -:  487:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  488:		}
        -:  489:
    #####:  490:		state->discardCount[player] = 0;
        -:  491:
        -:  492:		// Step 2 Draw Card.
    #####:  493:		count = state->handCount[player]; // Get current player's hand count.
        -:  494:    
        -:  495:		if (DEBUG) {
        -:  496:			printf("Current hand count: %d\n", count);
        -:  497:		}
        -:  498:    
    #####:  499:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  500:
    #####:  501:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  502:			return -1;
        -:  503:
    #####:  504:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  505:		state->deckCount[player]--;
    #####:  506:		state->handCount[player]++;//Increment hand count
        -:  507:	}
        -:  508:	else {
       68:  509:		int count = state->handCount[player];//Get current hand count for player
        -:  510:		int deckCounter;
        -:  511:		if (DEBUG){//Debug statements
        -:  512:			printf("Current hand count: %d\n", count);
        -:  513:	}
       68:  514:	deckCounter = state->deckCount[player];//Create holder for the deck count
       68:  515:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       68:  516:	state->deckCount[player]--;
       68:  517:	state->handCount[player]++;//Increment hand count
        -:  518:	}
       68:  519:	return 0;
        -:  520:}
        -:  521:
function getCost called 2 returned 100% blocks executed 13%
        2:  522:int getCost(int cardNumber) {
        2:  523:	switch( cardNumber ) {
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 1
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
    #####:  524:		case curse:		return 0;
    #####:  525:		case estate:		return 2;
    #####:  526:		case duchy:		return 5;
    #####:  527:		case province:		return 8;
        1:  528:		case copper:		return 0;
    #####:  529:		case silver:		return 3;
        1:  530:		case gold:		return 6;
    #####:  531:		case adventurer:	return 6;
    #####:  532:		case council_room:	return 5;
    #####:  533:		case feast:		return 4;
    #####:  534:		case gardens:		return 4;
    #####:  535:		case mine:		return 5;
    #####:  536:		case remodel:		return 4;
    #####:  537:		case smithy:		return 4;
    #####:  538:		case village:		return 3;
    #####:  539:		case baron:		return 4;
    #####:  540:		case great_hall:	return 3;
    #####:  541:		case minion:		return 5;
    #####:  542:		case steward:		return 3;
    #####:  543:		case tribute:		return 5;
    #####:  544:		case ambassador:	return 3;
    #####:  545:		case cutpurse:		return 4;
    #####:  546:		case embargo:		return 2;
    #####:  547:		case outpost:		return 5;
    #####:  548:		case salvager:		return 4;
    #####:  549:		case sea_hag:		return 4;
    #####:  550:		case treasure_map:	return 4;
        -:  551:	}
    #####:  552:	return -1;
        -:  553:}
        -:  554:
function cardEffect called 3 returned 100% blocks executed 17%
        3:  555:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  556:	int i, j, k, x, index;
        3:  557:	int currentPlayer = whoseTurn(state);
call    0 returned 3
        3:  558:	int nextPlayer = currentPlayer + 1;
        -:  559://	int tributeRevealedCards[2] = {-1, -1};
        -:  560:	int temphand[MAX_HAND];
        -:  561://	int drawntreasure = 0;
        -:  562://	int cardDrawn;
        -:  563://	int z = 0; // This is the counter for the temp hand.
        3:  564:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  565:		nextPlayer = 0;
        -:  566:	}
        -:  567:	
        -:  568:	// Uses switch to select card and perform actions
        3:  569:	switch( card ) {
branch  0 taken 0
branch  1 taken 2
branch  2 taken 0
branch  3 taken 0
branch  4 taken 1
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  570:		case adventurer:
    #####:  571:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  572:			return 0;
        -:  573:
        -:  574:		case council_room:
        -:  575:			// +4 Cards.
       10:  576:			for (i = 0; i < 4; i++) {
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        8:  577:				drawCard(currentPlayer, state);
call    0 returned 8
        -:  578:			}
        -:  579:			// +1 Buy.
        2:  580:			state->numBuys++;
        -:  581:			// Each other player draws a card.
        6:  582:			for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:  583:				if ( i != currentPlayer ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  584:					drawCard(i, state);
call    0 returned 2
        -:  585:				}
        -:  586:			}
        -:  587:			// Put played card in played card pile.
        2:  588:			discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        2:  589:			return 0;
        -:  590:			
        -:  591:		case feast:
        -:  592:			// Gain card with cost up to 5.
        -:  593:			// Backup hand.
    #####:  594:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  595:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  596:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  597:			}
        -:  598:			// Backup hand.
        -:  599:			// Update Coins for Buy.
    #####:  600:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  601:			x = 1; // Condition to loop on.
    #####:  602:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  603:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:					if (DEBUG)
        -:  605:						printf("None of that card left, sorry!\n");
        -:  606:					if (DEBUG){
        -:  607:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  608:					}
        -:  609:				}
    #####:  610:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  611:					printf("That card is too expensive!\n");
call    0 never executed
        -:  612:					if (DEBUG) {
        -:  613:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  614:					}
        -:  615:				}
        -:  616:				else {
        -:  617:					if (DEBUG) {
        -:  618:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  619:					}
    #####:  620:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  621:					x = 0; // No more buying cards.
        -:  622:					if (DEBUG) {
        -:  623:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  624:					}
        -:  625:				}
        -:  626:			}
        -:  627:			// Reset Hand.
    #####:  628:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  629:				state->hand[currentPlayer][i] = temphand[i];
    #####:  630:				temphand[i] = -1;
        -:  631:			}
        -:  632:			// End reset Hand.
    #####:  633:			return 0;
        -:  634:
        -:  635:		case gardens:
    #####:  636:			return -1;
        -:  637:			
        -:  638:		case mine:
        1:  639:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
        1:  640:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  641:				return -1;
        -:  642:			}
        1:  643:			if (choice2 > treasure_map || choice2 < curse) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  644:				return -1;
        -:  645:			}
        1:  646:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  647:				return -1;
        -:  648:			}
        1:  649:			gainCard(choice2, state, 2, currentPlayer);
call    0 returned 1
        -:  650:
        -:  651:			// Discard card from hand.
        1:  652:			discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        -:  653:			// Discard trashed card.
        2:  654:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 2
branch  1 taken 0 (fallthrough)
        2:  655:				if (state->hand[currentPlayer][i] == j) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  656:					discardCard(i, currentPlayer, state, 0);
call    0 returned 1
        1:  657:					break;
        -:  658:				}
        -:  659:			}
        1:  660:			return 0;
        -:  661:			
        -:  662:		case remodel:
    #####:  663:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  664:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  665:				return -1;
        -:  666:			}
    #####:  667:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  668:			// Discard card from hand.
    #####:  669:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:			// Discard trashed card.
    #####:  671:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  672:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  673:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  674:					break;
        -:  675:				}
        -:  676:			}
    #####:  677:			return 0;
        -:  678:		
        -:  679:		case smithy:
    #####:  680:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  681:			return 0;
        -:  682:
        -:  683:		case village:
        -:  684:			// +1 Card.
    #####:  685:			drawCard(currentPlayer, state);
call    0 never executed
        -:  686:			// +2 Actions.
    #####:  687:			state->numActions = state->numActions + 2;
        -:  688:			// Discard played card from hand.
    #####:  689:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			return 0;
        -:  691:
        -:  692:		case baron:
    #####:  693:			state->numBuys++;										// Increase buys by 1!
    #####:  694:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  695:				int p = 0;										// Iterator for hand!
    #####:  696:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  697:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  698:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  699:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  700:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  701:						state->discardCount[currentPlayer]++;
    #####:  702:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  703:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  704:						}
    #####:  705:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  706:						state->handCount[currentPlayer]--;
    #####:  707:						card_not_discarded = 0;						// Exit the loop.
        -:  708:					}
    #####:  709:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  710:						if(DEBUG) {
        -:  711:							printf("No estate cards in your hand, invalid choice\n");
        -:  712:							printf("Must gain an estate if there are any\n");
        -:  713:						}
    #####:  714:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  716:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  717:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:								isGameOver(state);
call    0 never executed
        -:  719:							}
        -:  720:						}
    #####:  721:						card_not_discarded = 0;						// Exit the loop.
        -:  722:					}
        -:  723:					else {
    #####:  724:						p++;										// Next card.
        -:  725:					}
        -:  726:				}
        -:  727:			}
        -:  728:			else {
    #####:  729:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  731:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  732:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:						isGameOver(state);
call    0 never executed
        -:  734:					}
        -:  735:				}
        -:  736:			}
    #####:  737:			return 0;
        -:  738:
        -:  739:		case great_hall:
        -:  740:			// +1 Card.
    #####:  741:			drawCard(currentPlayer, state);
call    0 never executed
        -:  742:			// +1 Actions.
    #####:  743:			state->numActions++;
        -:  744:			// Discard card from hand.
    #####:  745:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  746:			return 0;
        -:  747:	
        -:  748:		case minion:
    #####:  749:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  750:			return 0;
        -:  751:
        -:  752:		case steward:
    #####:  753:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  754:				// +2 cards.
    #####:  755:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  756:				drawCard(currentPlayer, state);
call    0 never executed
        -:  757:			}
    #####:  758:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  759:				// +2 coins.
    #####:  760:				state->coins = state->coins + 2;
        -:  761:			}
        -:  762:			else {
        -:  763:				// Trash 2 cards in hand.
    #####:  764:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  765:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  766:			}
        -:  767:			// Discard card from hand.
    #####:  768:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  769:			return 0;
        -:  770:
        -:  771:		case tribute:
    #####:  772:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  773:			return 0;
        -:  774:
        -:  775:		case ambassador:
    #####:  776:			j = 0; //used to check if player has enough cards to discard
    #####:  777:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  778:				return -1;
        -:  779:			}
    #####:  780:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  781:				return -1;
        -:  782:			}
    #####:  783:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  784:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  785:					j++;
        -:  786:				}
        -:  787:			}
    #####:  788:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  789:				return -1;
        -:  790:			}
        -:  791:			if (DEBUG)
        -:  792:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  793:
        -:  794:			// Increase supply count for choosen card by amount being discarded.
    #####:  795:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  796:
        -:  797:			// Each other player gains a copy of revealed card.
    #####:  798:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  800:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  801:				}
        -:  802:			}
        -:  803:
        -:  804:			// Discard played card from hand.
    #####:  805:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  806:
        -:  807:			// Trash copies of cards returned to supply.
    #####:  808:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  809:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  810:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  811:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  812:						break;
        -:  813:					}
        -:  814:				}
        -:  815:			}
    #####:  816:			return 0;
        -:  817:		
        -:  818:		case cutpurse:
    #####:  819:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  820:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  822:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  823:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  824:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  825:							break;
        -:  826:						}
    #####:  827:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  828:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  829:								if (DEBUG)
        -:  830:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  831:							}
    #####:  832:							break;
        -:  833:						}
        -:  834:					}
        -:  835:				}
        -:  836:			}
        -:  837:			// Discard played card from hand.
    #####:  838:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:			return 0;
        -:  840:
        -:  841:		case embargo:
        -:  842:			// +2 Coins.
    #####:  843:			state->coins = state->coins + 2;
        -:  844:			// See if selected pile is in play.
    #####:  845:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  846:				return -1;
        -:  847:			}
        -:  848:			// Add embargo token to selected supply pile.
    #####:  849:			state->embargoTokens[choice1]++;
        -:  850:			// Trash card.
    #####:  851:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  852:			return 0;
        -:  853:
        -:  854:		case outpost:
        -:  855:			// Set outpost flag.
    #####:  856:			state->outpostPlayed++;
        -:  857:			// Discard card.
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:			return 0;
        -:  860:
        -:  861:		case salvager:
        -:  862:			// +1 buy.
    #####:  863:			state->numBuys++;
    #####:  864:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  865:				// Gain coins equal to trashed card.
    #####:  866:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  867:				// Trash card.
    #####:  868:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  869:			}
        -:  870:			// Discard card.
    #####:  871:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:			return 0;
        -:  873:
        -:  874:		case sea_hag:
    #####:  875:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  876:			return 0;
        -:  877:
        -:  878:		case treasure_map:
        -:  879:			// Search hand for another treasure_map.
    #####:  880:			index = -1;
    #####:  881:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:					index = i;
    #####:  884:					break;
        -:  885:				}
        -:  886:			}
    #####:  887:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  888:				// Trash both treasure cards.
    #####:  889:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  890:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  891:				// Gain 4 Gold cards.
    #####:  892:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  893:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  894:				}
        -:  895:				// Return success.
    #####:  896:				return 1;
        -:  897:			}
        -:  898:
        -:  899:		// No second treasure_map found in hand.
    #####:  900:		return -1;
        -:  901:
        -:  902:	} // End switch()
        -:  903:
    #####:  904:	return -1;
        -:  905:} // End cardEffect()
        -:  906:
        -:  907:
function runAdventurer called 2 returned 100% blocks executed 93%
        2:  908:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
        2:  909:	int drawntreasure = 0;
        2:  910:	int z = 0;
        -:  911:	int cardDrawn;
        -:  912:
       10:  913:	while (drawntreasure < 2) {
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        6:  914:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  915:			shuffle(currentPlayer, state);
call    0 never executed
        -:  916:		}
        6:  917:		drawCard(currentPlayer, state);
call    0 returned 6
        6:  918:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
        6:  919:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        4:  920:			drawntreasure++;
        -:  921:		else {
        2:  922:			temphand[z] = cardDrawn;
        2:  923:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
        2:  924:			z++;
        -:  925:		}
        -:  926:	}
        6:  927:	while (z - 1 >= 0) {
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        2:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
        2:  929:		z = z - 1;
        -:  930:	}
        2:  931:}
        -:  932:
        -:  933:
function runSmithy called 4 returned 100% blocks executed 100%
        4:  934:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  935:	int i;
        -:  936:	// +3 Cards.
       16:  937:	for (i = 3; i > 0; i--) {
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:  938:		drawCard(currentPlayer, state);
call    0 returned 12
        -:  939:	}
        -:  940:	// Discard card from hand.
        4:  941:	discardCard(handPos--, currentPlayer, state, 0);
call    0 returned 4
        4:  942:}
        -:  943:
        -:  944:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  945:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  946:	int i;
    #####:  947:	int tributeRevealedCards[2] = { -1, -1 };
        -:  948:
    #####:  949:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  950:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  951:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  952:			state->deckCount[nextPlayer]--;
        -:  953:		}
    #####:  954:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  955:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  956:			state->discardCount[nextPlayer]--;
        -:  957:		}
        -:  958:		else {
        -:  959:			// No Card to Reveal.
        -:  960:			if (DEBUG) {
        -:  961:				printf("No cards to reveal\n");
        -:  962:			}
        -:  963:		}
        -:  964:	}
        -:  965:	else {
    #####:  966:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  967:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  968:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  969:				state->deckCount[nextPlayer]++;
    #####:  970:				state->discard[nextPlayer][i] = -1;
    #####:  971:				state->discardCount[nextPlayer]--;
        -:  972:			}
    #####:  973:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  974:		}
    #####:  975:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  976:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:		state->deckCount[nextPlayer]--;
    #####:  978:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  979:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  980:		state->deckCount[nextPlayer]--;
        -:  981:	}
        -:  982:
    #####:  983:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  984:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  985:		state->playedCardCount++;
    #####:  986:		tributeRevealedCards[1] = -1;
        -:  987:	}
    #####:  988:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  989:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  990:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####:  991:			state->coins += 2;
        -:  992:		}
    #####:  993:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  994:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  995:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####:  996:			drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:			drawCard(currentPlayer, state);
call    0 never executed
        -:  998:		}
        -:  999:		else {  // Action Card.
    #####: 1000:			state->numActions = state->numActions + 2;
        -: 1001:		}
        -: 1002:	}
    #####: 1003:}
        -: 1004:
        -: 1005:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1006:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1007:	int i, j;
        -: 1008:	// +1 action.
    #####: 1009:	state->numActions++;
        -: 1010:	// Discard card from hand.
    #####: 1011:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1012:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1013:		state->coins = state->coins + 2;
        -: 1014:	}
    #####: 1015:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1016:						// Discard hand.
    #####: 1017:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1019:		}
        -: 1020:		// Draw 4.
    #####: 1021:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1023:		}
        -: 1024:		// Other players discard hand and redraw if hand size > 4.
    #####: 1025:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1026:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1027:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1028:					// Discard hand.
    #####: 1029:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1030:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:					}
        -: 1032:					// Draw 4.
    #####: 1033:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1034:						drawCard(i, state);
call    0 never executed
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:		}
        -: 1039:	}
    #####: 1040:}
        -: 1041:
        -: 1042:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1043:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1044:	int i;
    #####: 1045:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1046:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1047:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1048:			state->deckCount[i]--;
    #####: 1049:			state->discardCount[i]++;
    #####: 1050:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1051:		}
        -: 1052:	}
    #####: 1053:}
        -: 1054:
        -: 1055:
function discardCard called 11 returned 100% blocks executed 89%
       11: 1056:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1057:	// If card is not trashed, added to Played pile.
       11: 1058:	if (trashFlag < 1) {
branch  0 taken 10 (fallthrough)
branch  1 taken 1
        -: 1059:		// Add card to played pile.
       10: 1060:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1061:		state->playedCardCount++;
        -: 1062:	}
        -: 1063:	// Set played card to -1.
       11: 1064:	state->hand[currentPlayer][handPos] = -1;
        -: 1065:	// Remove card from player's hand.
       11: 1066:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 taken 1 (fallthrough)
branch  1 taken 10
        -: 1067:		// Reduce number of cards in hand.
        1: 1068:		state->handCount[currentPlayer]--;
        -: 1069:	}
       10: 1070:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -: 1071:      //reduce number of cards in hand
    #####: 1072:      state->handCount[currentPlayer]--;
        -: 1073:	}
        -: 1074:	else {
        -: 1075:		// Replace discarded card with last card in hand.
       10: 1076:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1077:		// Set last card to -1.
       10: 1078:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1079:		// Reduce number of cards in hand.
       10: 1080:		state->handCount[currentPlayer]--;
        -: 1081:	}
       11: 1082:	return 0;
        -: 1083:}
        -: 1084:
        -: 1085:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1086:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1087:	// Note: supplyPos is enum of choosen card.
        -: 1088:	// Check if supply pile is empty (0) or card is not used in game (-1).
        7: 1089:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 returned 7
branch  1 taken 2 (fallthrough)
branch  2 taken 5
        2: 1090:		return -1;
        -: 1091:	}
        -: 1092:
        -: 1093:	// Added card for [whoseTurn] current player:
        -: 1094:	// toFlag = 0 : add to discard
        -: 1095:	// toFlag = 1 : add to deck
        -: 1096:	// toFlag = 2 : add to hand
        -: 1097:
        5: 1098:	if (toFlag == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 1099:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1100:		state->deckCount[player]++;
        -: 1101:	}
        4: 1102:	else if (toFlag == 2) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 1103:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1104:		state->handCount[player]++;
        -: 1105:	}
        -: 1106:	else {
        2: 1107:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1108:		state->discardCount[player]++;
        -: 1109:	}
        -: 1110:	// Decrease number in supply pile.
        5: 1111:	state->supplyCount[supplyPos]--;
        -: 1112:
        5: 1113:	return 0;
        -: 1114:}
        -: 1115:
        -: 1116:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1117:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1118:	int i;
        -: 1119:	// Reset coin count.
        8: 1120:	state->coins = 0;
        -: 1121:	// Add coins for each Treasure card in player's hand.
       48: 1122:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 40
branch  1 taken 8 (fallthrough)
       40: 1123:		if (state->hand[player][i] == copper) {
branch  0 taken 29 (fallthrough)
branch  1 taken 11
       29: 1124:			state->coins += 1;
        -: 1125:		}
       11: 1126:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 1127:			state->coins += 2;
        -: 1128:		}
       11: 1129:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####: 1130:			state->coins += 3;
        -: 1131:		}
        -: 1132:	}
        -: 1133:	// Add bonus.
        8: 1134:	state->coins += bonus;
        -: 1135:
        8: 1136:	return 0;
        -: 1137:}
        -: 1138:
        -: 1139:// End of dominion.c
